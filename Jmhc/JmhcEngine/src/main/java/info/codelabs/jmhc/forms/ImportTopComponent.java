/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package info.codelabs.jmhc.forms;

import info.codelabs.jmhc.core.Controller;
import info.codelabs.jmhc.processing.DBExtractor;
import info.codelabs.jmhc.processing.SeqExtractor;
import info.codelabs.jmhc.objects.DBSettings;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//info.codelabs.jmhc.forms//Import//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ImportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "info.codelabs.jmhc.forms.ImportTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ImportAction",
        preferredID = "ImportTopComponent"
)
@Messages({
    "CTL_ImportAction=Import",
    "CTL_ImportTopComponent=Import Window",
    "HINT_ImportTopComponent=This is a Import window"
})
public final class ImportTopComponent extends TopComponent {

    private Preferences prefs;
    private ProgramControler mProgramControler;
    private final long startTime = 0;
    private final long stopTime = 0;
    private SeqExtractor mSeqExtractor = null;
    private final DBExtractor mDBExtractor = null;
    private final String IOWindow = "Import";
    private InputOutput mInputOutput = null;

    public ImportTopComponent() {
        initComponents();
        setName(Bundle.CTL_ImportTopComponent());
        setToolTipText(Bundle.HINT_ImportTopComponent());
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        // output per component
        mInputOutput = IOProvider.getDefault().getIO(IOWindow, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jCheckBox_Both_Side_TAG = new javax.swing.JCheckBox();
        jCheckBox_Allow_One_Mismatch = new javax.swing.JCheckBox();
        jCheckBox_F = new javax.swing.JCheckBox();
        jCheckBox_R = new javax.swing.JCheckBox();
        jButton_RUN = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTextField_PrimerF = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextField_PrimerR = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTextField_TAG_Length = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField_Sequence_Starts = new javax.swing.JTextField();
        jCheckBox_sequence_starts = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jTextField_fixed_length = new javax.swing.JTextField();
        jCheckBox_fixed_length = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jTextField_PrimerR_CutOff = new javax.swing.JTextField();
        jCheckBox_cutoff = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1_files = new javax.swing.JList();

        setDisplayName(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.displayName")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_Both_Side_TAG, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_Both_Side_TAG.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_Allow_One_Mismatch, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_Allow_One_Mismatch.text")); // NOI18N

        jCheckBox_F.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_F, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_F.text")); // NOI18N

        jCheckBox_R.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_R, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_R.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton_RUN, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jButton_RUN.text")); // NOI18N
        jButton_RUN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RUNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox_F)
                            .addComponent(jCheckBox_R)
                            .addComponent(jCheckBox_Allow_One_Mismatch)
                            .addComponent(jCheckBox_Both_Side_TAG))
                        .addGap(96, 96, 96))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton_RUN)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox_Both_Side_TAG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_Allow_One_Mismatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_F)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_R)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_RUN)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel1.border.title"))); // NOI18N

        jTextField_PrimerF.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.text")); // NOI18N
        jTextField_PrimerF.setToolTipText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.toolTipText")); // NOI18N
        jTextField_PrimerF.setName(""); // NOI18N
        jTextField_PrimerF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_PrimerFFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_PrimerF)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTextField_PrimerF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jTextField_PrimerF.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_PrimerF.AccessibleContext.accessibleName")); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel2.border.title"))); // NOI18N

        jTextField_PrimerR.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_PrimerR.text")); // NOI18N
        jTextField_PrimerR.setToolTipText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_PrimerR.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_PrimerR)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_PrimerR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel3.border.title"))); // NOI18N

        jTextField_TAG_Length.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_TAG_Length.text")); // NOI18N
        jTextField_TAG_Length.setToolTipText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_TAG_Length.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_TAG_Length)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_TAG_Length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel4.border.title"))); // NOI18N

        jTextField_Sequence_Starts.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_Sequence_Starts.text")); // NOI18N
        jTextField_Sequence_Starts.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_sequence_starts, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_sequence_starts.text")); // NOI18N
        jCheckBox_sequence_starts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_sequence_startsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jCheckBox_sequence_starts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_Sequence_Starts))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField_Sequence_Starts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBox_sequence_starts))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel8.border.title"))); // NOI18N

        jTextField_fixed_length.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_fixed_length.text")); // NOI18N
        jTextField_fixed_length.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_fixed_length, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_fixed_length.text")); // NOI18N
        jCheckBox_fixed_length.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_fixed_lengthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jCheckBox_fixed_length)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_fixed_length, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBox_fixed_length, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jTextField_fixed_length, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jPanel6.border.title"))); // NOI18N

        jTextField_PrimerR_CutOff.setText(org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jTextField_PrimerR_CutOff.text")); // NOI18N

        jCheckBox_cutoff.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox_cutoff, org.openide.util.NbBundle.getMessage(ImportTopComponent.class, "ImportTopComponent.jCheckBox_cutoff.text")); // NOI18N
        jCheckBox_cutoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_cutoffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jCheckBox_cutoff)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_PrimerR_CutOff))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField_PrimerR_CutOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBox_cutoff))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jList1_files.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "/home/michal/Dropbox/share_work/sample_dir/sample_jmhc/Haslinafiles/s_Hnalla250.fastq_good.fasta" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1_files);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_PrimerFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_PrimerFFocusGained


    }//GEN-LAST:event_jTextField_PrimerFFocusGained

    private void jButton_RUNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RUNActionPerformed

        try {
            String sqlitedb = "/home/michal/Dropbox/share_work/sample_dir/sample_jmhc/Haslinafiles/has2.sqlite";

            mInputOutput.getOut().println("DB path: " + sqlitedb);
//            mInputOutput.getOut().close();
//            mInputOutput.getErr().close();
//            mInputOutput.select();
            // TODO: temporal dbconnection
            Controller mController = new Controller();
            mController.ConnectToDataBase(sqlitedb);

            this.mProgramControler = mController.ProgramControler;

            // sequence extraction
            this.ExtractSequences();

        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        } finally {

            mInputOutput.getOut().close();
            mInputOutput.getErr().close();
        }
    }//GEN-LAST:event_jButton_RUNActionPerformed

    private void ExtractSequences() throws Exception {
        try {

            ListModel model = jList1_files.getModel();
            List<String> fileList = new ArrayList<>();

            for (int i = 0; i < model.getSize(); i++) {
                String filePath = (String) model.getElementAt(i);
                fileList.add(filePath);
            }

            if (fileList.isEmpty()) {
                throw new Exception("No files selected!");
            }

            if (this.mProgramControler.getDBSettings() == null || this.mProgramControler.getDBSettings().getMSQLite() == null) {
                throw new Exception("Connect to database");
            }

            if (!jCheckBox_F.isSelected() && !jCheckBox_R.isSelected()) {
                throw new Exception("Select search direction");
            }

            int fixedLength = 0;
            if (jCheckBox_fixed_length.isSelected()) {
                try {
                    fixedLength = Integer.parseInt(jTextField_fixed_length.getText());
                    if (fixedLength < 0) {
                        throw new Exception("Sequence length must be > 0");
                    }
                } catch (NumberFormatException e) {
                    throw new Exception(DBSettings.mess_ValueMustBeInteger);
                }
            }

            int primerRlength = jTextField_PrimerF.getText().trim().length();
            int primerFlength = jTextField_PrimerF.getText().trim().length();
            int primerRCutoff = 0;

            if (jCheckBox_cutoff.isSelected() && !jTextField_PrimerR_CutOff.getText().trim().isEmpty()) {
                try {
                    primerRCutoff = Integer.parseInt(jTextField_PrimerR_CutOff.getText().trim());
                    if (primerRCutoff <= 0 || primerRCutoff >= primerRlength) {
                        throw new Exception("Cutoff must be > 0 and =< primer R length");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            DBSettings.mess_ValueMustBeInteger, this.getName(), JOptionPane.INFORMATION_MESSAGE);
                }
            }

            if (primerFlength == 0) {
                throw new Exception(mProgramControler.DBSettings.exc_pleaseSet + "Primer F");
            }

            if (!jCheckBox_fixed_length.isSelected() && primerRlength == 0) {
                throw new Exception(mProgramControler.DBSettings.exc_pleaseSet + "Primer R");
            }

            int taglength = 0;
            if (!jTextField_TAG_Length.getText().trim().isEmpty()) {
                taglength = Integer.parseInt(jTextField_TAG_Length.getText().trim());
            }

            mSeqExtractor = new SeqExtractor(mProgramControler, mInputOutput);
            mSeqExtractor.setCutoff(jCheckBox_cutoff.isSelected());
            mSeqExtractor.setPrimerRcutoff(primerRCutoff);
            mSeqExtractor.setPrimerF(jTextField_PrimerF.getText().trim());
            mSeqExtractor.setPrimerR(jTextField_PrimerF.getText().trim());

            mSeqExtractor.setTAGlength(taglength);
            mSeqExtractor.setFileList(fileList);
            mSeqExtractor.setStrain_F(jCheckBox_F.isSelected());
            mSeqExtractor.setStrain_R(jCheckBox_R.isSelected());
            mSeqExtractor.setMustStartWith(jCheckBox_sequence_starts.isSelected());
            mSeqExtractor.setSeqBeginerMustBe(jTextField_Sequence_Starts.getText());

            mSeqExtractor.setOneSideTags(!jCheckBox_Both_Side_TAG.isSelected());
            mSeqExtractor.setFixedSequenceLength(fixedLength);
            mSeqExtractor.setAllowOneMismatchInTag(jCheckBox_Allow_One_Mismatch.isSelected());

            mSeqExtractor.StartProcessing();

        } catch (Exception e) {
            throw e;
        } finally {
        }
    }


    private void jCheckBox_fixed_lengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_fixed_lengthActionPerformed
        this.jTextField_fixed_length.setEnabled(jCheckBox_fixed_length.isSelected());
    }//GEN-LAST:event_jCheckBox_fixed_lengthActionPerformed

    private void jCheckBox_cutoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_cutoffActionPerformed
        this.jTextField_PrimerR_CutOff.setEnabled(jCheckBox_cutoff.isSelected());
    }//GEN-LAST:event_jCheckBox_cutoffActionPerformed

    private void jCheckBox_sequence_startsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_sequence_startsActionPerformed
        this.jTextField_Sequence_Starts.setEnabled(jCheckBox_sequence_starts.isSelected());        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_sequence_startsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_RUN;
    private javax.swing.JCheckBox jCheckBox_Allow_One_Mismatch;
    private javax.swing.JCheckBox jCheckBox_Both_Side_TAG;
    private javax.swing.JCheckBox jCheckBox_F;
    private javax.swing.JCheckBox jCheckBox_R;
    private javax.swing.JCheckBox jCheckBox_cutoff;
    private javax.swing.JCheckBox jCheckBox_fixed_length;
    private javax.swing.JCheckBox jCheckBox_sequence_starts;
    private javax.swing.JList jList1_files;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField_PrimerF;
    private javax.swing.JTextField jTextField_PrimerR;
    private javax.swing.JTextField jTextField_PrimerR_CutOff;
    private javax.swing.JTextField jTextField_Sequence_Starts;
    private javax.swing.JTextField jTextField_TAG_Length;
    private javax.swing.JTextField jTextField_fixed_length;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
